{"version":3,"sources":["components/Item.js","components/ContainerPorducts.js","components/Cart.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Item","Col","xs","Card","CardImg","height","width","src","this","props","image","alt","name","CardBody","CardTitle","CardSubtitle","price","Button","outline","color","onClick","addToCart","product","React","Component","ContainerPorducts","allProducts","products","map","index","addCart","imgUrl","key","Container","Row","Cart","allCart","cartProducts","removeCart","remveChecked","count","total","reduce","acc","elem","i","totalCount","removeAll","console","log","length","NavBar","Nav","NavItem","to","App","newCart","state","cart","productIndex","findIndex","p","push","setState","secondNewCart","secondProductIndex","splice","toggleCheckedProducts","handleChange","event","searchValue","target","value","filteredProducts","filter","toLowerCase","includes","handleSubmit","preventDefault","search","checked","axios","method","url","then","res","data","catch","err","type","placeholder","onChange","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fdeb491a.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button, Col\n} from 'reactstrap';\nexport default class Item extends React.Component {\n  render() {\n\n    return (\n    <Col xs=\"4\">  \n    <Card >\n    <CardImg  \n          height=\"200\"\n          width=\"200\" src={this.props.image}  alt={this.props.name} />\n    <CardBody>\n      <CardTitle> {this.props.name}</CardTitle>\n      <CardSubtitle>Price: ${this.props.price}</CardSubtitle>\n      <Button outline color=\"secondary\" onClick={() => this.props.addToCart(this.props.product)}> Add to Cart</Button>\n    </CardBody>\n  </Card>\n</Col>\n  );\n};\n}\n\n\n//       <div>\n//         <p>{this.props.name}</p>\n//         <p> Price: ${this.props.price}</p>\n//         <button onClick={() => this.props.addToCart(this.props.product)}>\n//           Add to Cart\n//         </button>\n//  \n//         <img\n//           src={this.props.image}\n          // height=\"200\"\n          // width=\"200\"\n//           alt={this.props.name}\n//         />\n\n\n//       </div>\n//     );\n//   }\n// }\n\n","import React from \"react\";\nimport Item from \"./Item\";\nimport { Container, Row } from 'reactstrap';\n\n\nexport default class ContainerPorducts extends React.Component {\n  render() {\n    const allProducts = this.props.products.map((product, index) => {\n      return (\n            <Item\n            addToCart={this.props.addCart}\n            image={product.imgUrl}\n            key={index}\n            product={product}\n            price={product.price}\n            name={product.name}\n          />\n        \n        // <Item\n        //   addToCart={this.props.addCart}\n        //   image={product.imgUrl}\n        //   key={index}\n        //   product={product}\n        //   price={product.price}\n        //   name={product.name}\n        // />\n      );\n    });\n\n    return <Container><Row>{allProducts}</Row></Container>;\n  }\n}\n\n\n\n\n","import React from \"react\";\nimport { Button } from 'reactstrap';\nexport default class Cart extends React.Component {\n  \n  \n  \n  render() {\n\n   \n    const allCart = this.props.cartProducts.map((product, index) => {\n      //  let product=  arr[i]\n      return (\n        <div key={index}>\n          <p>{index + 1}.</p>\n          <p>Product name: {product.name}</p>\n          <p>Product Price: {product.price}</p>\n          <button onClick={() => this.props.removeCart(product)}>\n            Remove from Cart </button>\n            <button onClick={() => this.props.remveChecked(product)}>\n            Select </button>\n          <img src={product.imgUrl} alt=\"\" height=\"200\" width=\"200\" />\n          <p>Count: {product.count}</p>\n          <p>Total Product Price: {product.price * product.count}</p>\n        </div>\n      );\n    });\n\n    let total = this.props.cartProducts.reduce((acc, elem, i) => {\n      return acc + elem.price * elem.count;\n    }, 0);\n    let totalCount = this.props.cartProducts.reduce((acc, elem, i) => {\n      return acc + elem.count;\n    }, 0);\n\n    return (\n      <div>\n        <Button outline color=\"danger\" onClick={() => this.props.removeAll(this.props.product)}>Remove All</Button>\n\n        {/* <button onClick={() => this.props.removeAll(this.props.product)}> */}\n          {/* Remove All  </button> */}\n        {console.log(this.props.cartProducts)}\n        {allCart}\n        Total price: {total}\n        {\" || \"}\n        Total Count: {totalCount}\n        {\" || \"}\n        Total Product Types: {this.props.cartProducts.length}\n      </div>\n    );\n  }\n}\n","\nimport React from 'react';\nimport { Nav, NavItem } from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport { Navbar} from 'react-bootstrap';\n\nconst NavBar = (props) => {\n\n\n  // return (\n{/* <div>\n    <Navbar bg=\"dark\" variant=\"light\">\n    <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"/\">Home Page</Nav.Link>\n      <Nav.Link href=\"/Cart\">Cart</Nav.Link>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-info\">Search</Button>\n    </Form>\n  </Navbar>\n  </div>\n    );\n}\nexport default NavBar; */}\nreturn (\n    <div>\n      <p>Hello....</p>\n      <Nav>\n      {/* <NavbarBrand href=\"/\">Home Page</NavbarBrand> */}\n        <NavItem>\n          <Link to=\"/\">Home Page</Link>\n        </NavItem>\n        <NavItem>\n        <Link to=\"/Cart\">Cart</Link>\n        </NavItem>\n      </Nav>\n    </div>\n  );\n}\n\nexport default NavBar;\n\n// import React, { useState } from 'react';\n// import {\n//   Collapse,\n//   Navbar,\n//   NavbarBrand,\n//   Nav,\n//   NavItem,\n//   NavLink,\n//   NavbarText\n// } from 'reactstrap';\n\n// const NavBar = (props) => {\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   const toggle = () => setIsOpen(!isOpen);\n\n//   return (\n//     <div>\n//       <Navbar color=\"light\" light expand=\"md\">\n//         <NavbarBrand href=\"/\">Home Page</NavbarBrand>\n   \n//         <Collapse isOpen={isOpen} navbar>\n//           <Nav className=\"mr-auto\" navbar>\n      \n//             <NavItem>\n//               <NavLink href=\"/Cart/\">Cart</NavLink>\n//             </NavItem>\n           \n//           </Nav>\n//           <NavbarText>Search</NavbarText>\n//         </Collapse>\n//       </Navbar>\n//     </div>\n//   );\n// }\n\n// export default NavBar;","import React, { Component } from \"react\";\nimport ContainerPorducts from \"./components/ContainerPorducts\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\nimport Cart from \"./components/Cart\";\nimport Item from \"./components/Item\";\nimport NavBar from './components/NavBar'\nimport { Button } from 'reactstrap';\n\n\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //initial value for all the products\n      products: [],\n      //initial value for selected prodcuts\n      cart:[],\n      //give the search box empty string\n      search: \"\",\n      checked: false\n    };\n  }\n  // make function to add product to cart and connect it with Cart component as a child\n  addCart = product => {\n    // console.log(\"cart: \", product);\n    // copy the cart array\n    const newCart = [...this.state.cart];\n    // console.log(\"cart: \", );\n    //second solution// let productIndex = newCart.indexOf(product)\n    //find the index of the selected prodcut\n    const productIndex = newCart.findIndex(p => p.name === product.name);\n    console.log(productIndex);\n    //check if this product in the cart\n    if (productIndex !== -1) {\n      // count increase 1\n      newCart[productIndex].count += 1;\n    } else {\n      // if it is not there\n      //add it with key count 0\n      product.count = 1;\n      newCart.push(product);\n\n    }\n    // add the product to cart\n\n    this.setState({ cart: newCart })\n    \n  };\n  // remove product form Cart\n  removeCart = product => {\n    const secondNewCart = [...this.state.cart];\n    const secondProductIndex = secondNewCart.findIndex(p => p.name === product.name);\n    console.log(\"salman\", secondNewCart);\n//second solution \n    // const secondProductIndex = secondNewCart.indexOf(product);\n   \n    //check if this product >0\n    if (secondNewCart[secondProductIndex].count > 1) {\n      //  decrease one\n      secondNewCart[secondProductIndex].count -= 1;\n    }\n    //  ==1\n    else {\n      // remove for the array cart\n      secondNewCart.splice(secondProductIndex, 1);\n    }\n    this.setState({ cart: secondNewCart });\n  };\n  //remove all the products in the cart\n  removeAll = () => {\n    this.setState({ cart: [] });\n  };\ntoggleCheckedProducts= ()=>{\n \n}\n  // removeSelectedProducts= () =>{\n  //   if (product.checked === true)\n  //     product.checked= false\n\n  // }\n\n  // connect to API\n  componentDidMount() {\n    axios({\n      method: \"get\",\n      url: \" https://my-json-server.typicode.com/jubs16/Products/Products\"\n    })\n      .then(res => {\n        console.log(\"RESPONSE: \", res);\n        console.log(\"DATA: \", res.data);\n        this.setState({\n          products: res.data\n        });\n      })\n\n      .catch(err => {\n        console.log(\"ERROR: \", err);\n      });\n  }\n\n  // function for the value of search box\n  handleChange = event => {\n    const searchValue = event.target.value;\n    console.log(searchValue);\n    // iterate over to make sure the product names and inserted value lowercase\n    const filteredProducts = this.state.products.filter(function(product) {\n      return product.name.toLowerCase().includes(searchValue.toLowerCase());\n    });\n\n    this.setState({ products: filteredProducts });\n  };\n\n  //sumbit the search \n  handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"Clicked!\");\n    this.setState({ search: \"\" });\n  };\n\n  // handleCheckboxChange = event =>\n  //     this.setState({ checked: event.target.checked })\n\n  render() {\n\n    return (\n      <div>\n        <Router>\n  \n    <NavBar/>\n          <nav>\n\n            <Link to=\"/\">Home Page</Link> {\"  ||  \"}\n            <Link to=\"/Item\"></Link> {\"  \"}\n            <Link to=\"/Cart\">Cart</Link>\n            {\"  \"}\n          </nav>\n          <div>\n            <form>\n              <input\n                type=\"text\"\n                placeholder=\"Search for shoes...\"\n                value={this.state.search}\n                onChange={this.handleChange}\n              />\n              <Button outline color=\"info\" onClick={this.handleSubmit}>submit</Button>{' '}\n              {/* <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} /> */}\n            </form>\n          </div>\n          <Route\n            exact\n            path=\"/\"\n            component={() => (\n              <ContainerPorducts\n                products={this.state.products}\n                addCart={this.addCart}\n              />\n            )}\n          />\n          <Route path=\"/Item\" component={Item} />\n          <Route\n            path=\"/Cart\"\n            component={() => (\n              <Cart\n                cartProducts={this.state.cart}\n                removeCart={this.removeCart}\n                removeAll={this.removeAll}\n                remveChecked={this.remveChecked}\n              />\n            )}\n          />\n        </Router>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}